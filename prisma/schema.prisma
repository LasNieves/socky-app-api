// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Code {
  id String @id @default(uuid())

  code Int
  used Boolean  @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime  @map("expires_at")

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@map("codes")
}

model User {
  id String @id @default(uuid())

  email     String   @unique
  password  String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile    Profile?
  posts      Post[]
  workspaces UsersOnWorkspaces[]
  codes      Code[]

  @@map("users")
}

model Profile {
  id String @id @default(uuid())

  firstName String @map("first_name")
  lastName  String @map("last_name")
  avatar    String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @map("user_id")

  @@map("profiles")
}

model Post {
  id String @id @default(uuid())

  title       String
  description String
  createdAt   DateTime @default(now()) @map("created_at")

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int      @map("category_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")

  @@map("posts")
}

model Category {
  id Int @id @default(autoincrement())

  title     String
  createdAt DateTime @default(now()) @map("created_at")

  posts       Post[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId String

  @@map("categories")
}

model Workspace {
  id String @id @default(uuid())

  name     String
  icon     String
  personal Boolean @default(true)

  users      UsersOnWorkspaces[]
  categories Category[]

  @@map("workspaces")
}

model UsersOnWorkspaces {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @map("workspace_id")

  role Role

  @@id([userId, workspaceId])
  @@map("users_workspaces")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  CAN_VIEW
}
